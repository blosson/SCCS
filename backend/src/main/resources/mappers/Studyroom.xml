<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.sccs.api.studyroom.mapper.StudyroomMapper">

  <resultMap id="studyList" type="StudyroomDto">
    <id column="id" property="id"/>
    <result column="title" property="title"/>
    <result column="is_private" property="isPrivate"/>
    <result column="is_solving" property="isSolving"/>
    <result column="host_id" property="hostId"/>
    <result column="personnel" property="personnel"/>
    <collection property="algoIds" ofType="Integer">
      <result column="algo_id"/>
    </collection>
    <collection property="languageIds" ofType="Integer">
      <result column="language_id"/>
    </collection>
  </resultMap>

  <resultMap id="studyList2" type="StudyroomDto">
    <id column="id" property="id"/>
    <result column="title" property="title"/>
    <collection property="algoIds" ofType="Integer">
      <result column="algo_id"/>
    </collection>
  </resultMap>

  <!-- 스터디룸 생성 -->
  <insert id="createStudyroom" parameterType="StudyroomDto" useGeneratedKeys="true"
    keyProperty="id">
    insert into studyroom(
    title,
    password,
    is_private,
    host_id
    )
    values(
    #{title},
    #{password},
    #{isPrivate},
    #{hostId}
    )
  </insert>
  <insert id="insertLanguageId" parameterType="StudyroomLanguageDto">
    insert into studyroom_language(
    language_id,
    studyroom_id
    )
    values(
    #{languageId},
    #{studyroomId}
    )
  </insert>
  <insert id="insertAlgoId" parameterType="StudyroomAlgoDto">
    insert into studyroom_algo(
    algo_id,
    studyroom_id
    )
    values(
    #{algoId},
    #{studyroomId}
    )
  </insert>

  <select id="selectProblemCount" parameterType="int" resultType="int">
    select count(*) from problem where algo_id=#{algoId}
  </select>

  <insert id="insertProblemId" parameterType="StudyroomProblemDto">
    insert into studyroom_problem(
    problem_id,
    studyroom_id
    )
    values(
    #{problemId},
    #{studyroomId}
    )
  </insert>

  <select id="selectProblemId" parameterType="String" resultType="int">
    select id from problem where problem_folder=#{path}
  </select>


  <insert id="insertMemberId" parameterType="StudyroomMemberDto">
    insert into studyroom_member(
    member_id,
    studyroom_id
    )
    values(
    #{memberId},
    #{studyroomId}
    )
  </insert>


  <select id="selectAllStudyroom" resultMap="studyList">
    SELECT s.id as id, s.title as title, s.is_private as is_private, s.is_solving as is_solving,
    s.personnel as personnel, sa.algo_id as algo_id , sl.language_id as language_id FROM studyroom s
    LEFT JOIN studyroom_algo sa ON s.id=sa.studyroom_id JOIN studyroom_language sl ON
    s.id=sl.studyroom_id
    where is_active=1
    order by create_datetime desc;
  </select>

  <select id="selectStudyroom" parameterType="StudyroomDto" resultMap="studyList">
    SELECT s.id as id, s.title as title, s.is_private as is_private, s.is_solving as is_solving,
    s.host_id as host_id, s.personnel as personnel, sa.algo_id as algo_id , sl.language_id as
    language_id FROM studyroom s LEFT JOIN studyroom_algo sa ON s.id=sa.studyroom_id JOIN
    studyroom_language sl ON s.id=sl.studyroom_id
    where is_active=1
    <if test="id != 0">
      AND s.id= #{id}
    </if>
    <if test="title!=null and title!=''">
      AND s.title LIKE CONCAT('%', #{title}, '%')
    </if>
    <if test="algoIds.size!=0">
      <foreach collection="algoIds" item="item" open="AND (sa.algo_id=" close=")"
        separator="OR sa.algo_id=">
        #{item}
      </foreach>
    </if>
    <if test="languageIds.size!=0">
      <foreach collection="languageIds" item="item" open="AND (sl.language_id=" close=")"
        separator="OR sl.language_id=">
        #{item}
      </foreach>
    </if>
    order by create_datetime desc;
  </select>


  <select id="checkStudyroomPassword" parameterType="StudyroomDto" resultType="int">
    select count(*) from studyroom where id = #{id} and password = #{password}
  </select>

  <select id="isExistStudyroom" parameterType="int" resultType="boolean">
    select IF(COUNT(*) = 1, 1, 0) from studyroom where id = #{id}
  </select>

  <!-- 회원 입장하고 ready 다 하고 스터디 시작하기 할 때 -->
  <insert id="insertMemberIds" parameterType="StudyroomDto">
    insert into studyroom_member(
    member_id,
    studyroom_id
    )
    values
    <foreach collection="memberIds" item="item" open="" separator=" , ">
      (#{item}, #{id})
    </foreach>
  </insert>

  <!-- 스터디룸 처음 입장할 때 방 정보 주려고 하는 것. -->
  <select id="enterStudyroom" parameterType="int" resultMap="studyList">
    SELECT s.id as id, s.title as title, s.is_private as is_private, s.is_solving as is_solving,
    s.host_id as host_id, s.personnel as personnel, sa.algo_id as algo_id , sl.language_id as
    language_id FROM studyroom s LEFT JOIN studyroom_algo sa ON s.id=sa.studyroom_id JOIN
    studyroom_language sl ON s.id=sl.studyroom_id
    where is_active=1 AND s.id= #{id}
  </select>

  <!-- 아이디 닉네임 꼬여서 넣은 로직 -->
  <select id="getNicknameById" parameterType="String" resultType="String">
    select nickname
    from member
    where id=#{id}
  </select>
  <select id="getIdByNickname" parameterType="String" resultType="String">
    select id
    from member
    where nickname=#{nickname}
  </select>

  <update id="changeStudyroomSolvingStatus" parameterType="StudyroomDto">
    UPDATE studyroom
    SET is_solving = true
    WHERE id = #{id}
  </update>

  <select id="getStudyroomPersonnel" parameterType="int" resultType="int">
    SELECT personnel
    From studyroom
    where id= #{id}
  </select>

  <update id="increaseStudyroomPersonnel" parameterType="int" useGeneratedKeys="true"
    keyProperty="personnel">
    UPDATE studyroom
    SET personnel = personnel+1
    WHERE id = #{id}
  </update>

  <update id="decreaseStudyroomPersonnel" parameterType="int" useGeneratedKeys="true"
    keyProperty="personnel">
    UPDATE studyroom
    SET personnel = personnel-1
    WHERE id = #{id}
  </update>

  <select id="selectStudyroomById" parameterType="int" resultMap="studyList2">
    SELECT s.id as id, s.title as title, sa.algo_id as algo_id FROM studyroom s
    LEFT JOIN studyroom_algo sa ON s.id=sa.studyroom_id where s.id=#{id};
  </select>

  <select id="selectProblemByStudyroomId" parameterType="int" resultType="ProblemDto">
    SELECT p.id, p.name, p.problem_folder FROM problem p
    LEFT JOIN studyroom_problem sp ON p.id=sp.problem_id where sp.studyroom_id=#{id};
  </select>

  <insert id="submitProblem" parameterType="SubmissionDto">
    insert into submission(
    id, file_name, runtime, memory, result, problem_id, member_id, language_id, studyroom_id)
    values (#{id}, #{fileName}, #{runtime}, #{memory}, #{result}, #{problemId}, #{memberId}, #{languageId}, #{studyroomId})
  </insert>

  <select id="getProblemInfo" parameterType="int" resultType="ProblemDto">
    SELECT * from problem where id=#{problemId}
  </select>

  <!-- 스터디에 필요한 정보를 가져오는 쿼리, 각 회원들이 2개의 문제를 해결한 결과를 보여준다. -->
  <select id="getStudyInfo" parameterType="StudyroomDto" resultType="SubmissionDto">
    SELECT s.id as id, s.runtime as runtime, s.memory as memory, s.result as result, s.submit_datetime as submit_datetime,
    s.problem_id as problem_id, s.member_id as member_id, m.nickname as member_nickname, s.language_id as language_id,
    s.studyroom_id as studyroom_id, s.file_name as file_name FROM (select * from submission
    where (member_id, submit_datetime) in (
    select member_id, max(submit_datetime) as submit_datetime
    from submission where studyroom_id=#{id} and problem_id=#{problemId} group by member_id
    ) order by submit_datetime desc)s
    LEFT JOIN member m ON m.id=s.member_id;
  </select>

  <update id="endStudyroomByOwner" parameterType="int">
    UPDATE studyroom
    SET is_active=FALSE ,destroy_datetime = now()
    WHERE id = #{id}
  </update>

  <select id="getHostInfoByStudyroomId" parameterType="int" resultType="MemberDto">
    select id, nickname from member where id = (select host_id from studyroom where id=#{studyroomId});
  </select>

  <!--회원이 이 문제를 풀었는지 확인하고 싶을 때-->
  <select id="isSolvingByUser" parameterType="SubmissionDto" resultType="int">
    select count(*) from submission where problem_id=#{problemId} and member_id=#{memberId}
  </select>

  <select id="getScoreByMember" parameterType="String" resultType="int">
    select score from member where id=#{id}
  </select>

  <update id="injectScore" parameterType="map">
    UPDATE member
    SET score = score + (
      select score from tier where
      <choose>
        <when test="memberScore>=100000">
          grade=1 and
        </when>
        <when test="100000>memberScore>=30000">
          grade=2 and
        </when>
        <when test="30000>memberScore>=3000">
          grade=3 and
        </when>
        <when test="3000>memberScore>=0">
          grade=4 and
        </when>
      </choose>
      difficulty=#{difficulty}
    )
    WHERE id =#{id}
  </update>

  <update id="updateProblemInfo" parameterType="map">
    UPDATE problem
    SET submission_number = submission_number+1
    <if test="correct==1">
      , accepted_number = accepted_number+1
    </if>
    where id=#{id}
  </update>

</mapper>